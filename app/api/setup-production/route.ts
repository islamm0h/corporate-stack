import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

export async function POST(request: NextRequest) {
  try {
    console.log('๐ ุจุฏุก ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ููุฅูุชุงุฌ...')

    // ุฅูุดุงุก ุงููุณุชุฎุฏููู
    console.log('๐ฅ ุฅูุดุงุก ุงููุณุชุฎุฏููู...')

    // ุชุดููุฑ ูููุฉ ูุฑูุฑ ุงูุชุฑุงุถูุฉ
    const defaultPassword = await bcrypt.hash('123456789', 12)

    const users = await prisma.user.createMany({
      data: [
        {
          firstName: 'ุฃุญูุฏ',
          lastName: 'ูุญูุฏ',
          username: 'admin',
          email: 'ahmed@company.com',
          passwordHash: defaultPassword,
          phone: '+966501234567',
          role: 'ADMIN',
          isActive: true,
          mustChangePassword: false
        },
        {
          firstName: 'ูุงุทูุฉ',
          lastName: 'ุนูู',
          username: 'fatima.ali',
          email: 'fatima@company.com',
          passwordHash: defaultPassword,
          phone: '+966501234568',
          role: 'USER',
          isActive: true,
          mustChangePassword: true
        },
        {
          firstName: 'ูุญูุฏ',
          lastName: 'ุงูุณุนุฏ',
          username: 'mohammed.saad',
          email: 'mohammed@company.com',
          passwordHash: defaultPassword,
          phone: '+966501234569',
          role: 'USER',
          isActive: true,
          mustChangePassword: true
        }
      ]
    })

    // ุฅูุดุงุก ุงูุฃูุธูุฉ
    console.log('๐ผ ุฅูุดุงุก ุงูุฃูุธูุฉ...')
    const systems = await prisma.system.createMany({
      data: [
        {
          name: 'ูุธุงู ุงููุญุงุณุจุฉ ุงููุชูุฏู',
          slug: 'accounting-system',
          description: 'ูุธุงู ูุญุงุณุจุฉ ุดุงูู ูุฏุนู ุฌููุน ุงูุนูููุงุช ุงููุงููุฉ ูุงููุญุงุณุจูุฉ',
          shortDescription: 'ูุธุงู ูุญุงุณุจุฉ ูุชูุงูู ููุดุฑูุงุช',
          category: 'ุงููุญุงุณุจุฉ ูุงููุงููุฉ',
          features: JSON.stringify([
            'ุฅุฏุงุฑุฉ ุงูุญุณุงุจุงุช',
            'ุงูุชูุงุฑูุฑ ุงููุงููุฉ',
            'ุฅุฏุงุฑุฉ ุงูููุงุชูุฑ',
            'ุชุชุจุน ุงููุตุฑููุงุช'
          ]),
          specifications: JSON.stringify({
            benefits: [
              'ุชูููุฑ ุงูููุช',
              'ุฏูุฉ ูู ุงูุญุณุงุจุงุช',
              'ุชูุงุฑูุฑ ุชูุตูููุฉ',
              'ุณูููุฉ ุงูุงุณุชุฎุฏุงู'
            ],
            targetAudience: [
              'ุงูุดุฑูุงุช ุงูุตุบูุฑุฉ ูุงููุชูุณุทุฉ',
              'ุงููุญุงุณุจูู',
              'ุฃุตุญุงุจ ุงูุฃุนูุงู'
            ]
          }),
          isActive: true
        },
        {
          name: 'ูุธุงู ุฅุฏุงุฑุฉ ุงูุนููุงุก (CRM)',
          slug: 'crm-system',
          description: 'ูุธุงู ุดุงูู ูุฅุฏุงุฑุฉ ุงูุนูุงูุงุช ูุน ุงูุนููุงุก ูุชุชุจุน ุงููุจูุนุงุช',
          shortDescription: 'ูุธุงู CRM ูุชูุงูู ูุฅุฏุงุฑุฉ ุงูุนููุงุก',
          category: 'ุฅุฏุงุฑุฉ ุงูุนููุงุก',
          features: JSON.stringify([
            'ุฅุฏุงุฑุฉ ุจูุงูุงุช ุงูุนููุงุก',
            'ุชุชุจุน ุงููุจูุนุงุช',
            'ุฅุฏุงุฑุฉ ุงููุฑุต ุงูุชุฌุงุฑูุฉ',
            'ุงูุชูุงุฑูุฑ ูุงูุชุญูููุงุช'
          ]),
          specifications: JSON.stringify({
            benefits: [
              'ุฒูุงุฏุฉ ุงููุจูุนุงุช',
              'ุชุญุณูู ุฎุฏูุฉ ุงูุนููุงุก',
              'ุชูุธูู ุงูุจูุงูุงุช',
              'ูุชุงุจุนุฉ ุงููุฑุต'
            ],
            targetAudience: [
              'ูุฑู ุงููุจูุนุงุช',
              'ุฅุฏุงุฑุฉ ุงูุชุณููู',
              'ุฎุฏูุฉ ุงูุนููุงุก'
            ]
          }),
          isActive: true
        },
        {
          name: 'ูุธุงู ุฅุฏุงุฑุฉ ุงููุฎุฒูู',
          slug: 'inventory-system',
          description: 'ูุธุงู ูุชุทูุฑ ูุฅุฏุงุฑุฉ ุงููุฎุฒูู ูุงููุณุชูุฏุนุงุช',
          shortDescription: 'ูุธุงู ุฅุฏุงุฑุฉ ูุฎุฒูู ุฐูู',
          category: 'ุฅุฏุงุฑุฉ ุงููุฎุฒูู',
          features: JSON.stringify([
            'ุชุชุจุน ุงููุฎุฒูู',
            'ุฅุฏุงุฑุฉ ุงููุณุชูุฏุนุงุช',
            'ุชูุงุฑูุฑ ุงููุฎุฒูู',
            'ุชูุจููุงุช ุงูููุงุฏ'
          ]),
          specifications: JSON.stringify({
            benefits: [
              'ุชุญูู ุฃูุถู ูู ุงููุฎุฒูู',
              'ุชูููู ุงููุงูุฏ',
              'ุชุญุณูู ุงูููุงุกุฉ',
              'ุชูููุฑ ุงูุชูุงููู'
            ],
            targetAudience: [
              'ูุฏูุฑู ุงููุฎุงุฒู',
              'ุฃุตุญุงุจ ุงููุชุงุฌุฑ',
              'ุงูุดุฑูุงุช ุงูุชุฌุงุฑูุฉ'
            ]
          }),
          isActive: true
        }
      ]
    })

    // ุฅูุดุงุก ุจุนุถ ุงูุนููุงุก ุงููุญุชูููู ุงูุชุฌุฑูุจููู
    const leads = await prisma.lead.createMany({
      data: [
        {
          companyName: 'ุดุฑูุฉ ุงูุชูููุฉ ุงููุชูุฏูุฉ',
          contactPerson: 'ุฎุงูุฏ ุฃุญูุฏ',
          email: 'khalid@tech-company.com',
          phone: '+966501111111',
          industry: 'ุงูุชูููุฉ',
          companySize: 'MEDIUM',
          region: 'ุงูุฑูุงุถ',
          city: 'ุงูุฑูุงุถ',
          source: 'WEBSITE',
          status: 'NEW',
          leadScore: 85
        },
        {
          companyName: 'ูุคุณุณุฉ ุงูุชุฌุงุฑุฉ ุงูุฐููุฉ',
          contactPerson: 'ุณุงุฑุฉ ูุญูุฏ',
          email: 'sara@smart-trade.com',
          phone: '+966502222222',
          industry: 'ุงูุชุฌุงุฑุฉ',
          companySize: 'SMALL',
          region: 'ููุฉ ุงูููุฑูุฉ',
          city: 'ุฌุฏุฉ',
          source: 'SOCIAL_MEDIA',
          status: 'CONTACTED',
          leadScore: 75
        }
      ]
    })

    return NextResponse.json({
      success: true,
      message: 'ุชู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ',
      data: {
        users: users.count,
        systems: systems.count,
        leads: leads.count
      }
    })

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error)
    return NextResponse.json({
      success: false,
      error: 'ูุดู ูู ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช',
      details: error instanceof Error ? error.message : 'ุฎุทุฃ ุบูุฑ ูุนุฑูู'
    }, { status: 500 })
  } finally {
    await prisma.$disconnect()
  }
}
